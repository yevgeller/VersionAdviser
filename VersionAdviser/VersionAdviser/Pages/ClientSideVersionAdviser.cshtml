@page
@model VersionAdviser.Pages.ClientSideVersionAdviserModel
@{
    ViewData["Title"] = "Client-side checker";
}


<div class="row">
    <div class="col-md-8">
        <div class="form-group">Enter your software number here:</div>
        <div class="form-group">
            <input class="form-control" id="userInputString" type="text" />
        </div>
        <div class="form-group">
            <input type="submit" id="submit" value="See what software has newer versions" class="btn btn-primary" />
            <div class="alert alert-danger mt-3" style="display:none;" id="invalidFormatWarning">Please enter version number in one of the following formats: X or X.Y or X.Y.Z, where X, Y, and Z are numbers.</div>
        </div>
        <div class="form-group">
            <div id="output"></div>
        </div>
    </div>
</div>

<script type="text/javascript">
    let software = [];
    let userVersion;

    window.onload = (event) => {
        registerListeners();
    };

    class Version {
        constructor(versionString) {
            let parts = versionString.split('.');
            let le = parts.length;
            while (le < 3) {
                parts.push(parseInt(0));
                le = parts.length;
            }
            this.major = parseInt(parts[0]);
            this.minor = parseInt(parts[1]);
            this.patch = parseInt(parts[2]);
        }

        compareTo(v) {
            if (v.major > this.major) {
                return -1;
            } else if (v.major < this.major) {
                return 1;
            } else if (v.minor > this.minor) {
                return -1;
            } else if (v.minor < this.minor) {
                return 1;
            } else if (v.patch > this.patch) {
                return -1;
            } else if (v.patch < this.patch) {
                return 1;
            }
            return 0;
        }
    }

    function loadDataFromServer() {
        $.ajax({
            url: '/SoftwareList',
            type: 'GET',
            dataType: 'json',
            success: function (data, textStatus, xhr) {
                software = data;
            },
            error: function (data, textStatus, errorThrown) {
                console.log('Error');
                software = [
                    {
                        name: "MS Word",
                        version: "13.2.1"
                    },
                    {
                        name: "AngularJS",
                        version: "1.7.1"
                    },
                    {
                        name: "Angular",
                        version: "8.1.13"
                    },
                    {
                        name: "React",
                        version: "0.0.5"
                    },
                    {
                        name: "Vue.js",
                        version: "2.6"
                    },
                    {
                        name: "Visual Studio",
                        version: "2017.0.1"
                    },
                    {
                        name: "Visual Studio",
                        version: "2019.1"
                    },
                    {
                        name: "Visual Studio Code",
                        version: "1.35"
                    },
                    {
                        name: "Blazor",
                        version: "0.7"
                    }
                ];
            }
        })
    }

    function registerListeners() {
        loadDataFromServer();
        let btn = document.getElementById('submit');
        btn.addEventListener('click', checkVersion);
        let i = document.getElementById('userInputString');
        i.addEventListener('input', validateVersionInput);
    }

    function checkVersion(event) {
        userVersion = new Version(document.getElementById('userInputString').value);
        const result = software
            .filter(s => userVersion.compareTo(new Version(s.version)) < 0)
            .sort((a, b) => {
                if (a.name > b.name) return 1;
                else return -1;
            });
        displayResult(result);
    }

    function validateVersionInput(event) {
        document.getElementById('output').innerHTML = '';
        let proposedVersion = event.target.value;
        let validVersionNumber = validateVersion(proposedVersion);
        if (validVersionNumber) {
            toggleWarningAndProcessing(true);
        } else {
            toggleWarningAndProcessing(false);
        }
    }

    function validateVersion(candidate) {
        var regex = /^([1-9]\d*|0)(\.(([1-9]\d*)|0)){0,2}$/;
        return regex.test(candidate);
    }

    function toggleWarningAndProcessing(allow) {
        document.getElementById('submit').disabled = !allow;

        if (allow) {
            document.getElementById('invalidFormatWarning').style.display = 'none';
        } else {
            document.getElementById('invalidFormatWarning').style.display = 'block';
        }
    }

    function displayResult(result) {
        let message = '';
        if (result.length === 0) {
            message = 'There is no newer software than the one you provided.'
        } else {
            const reducerFunction = (prev, curr) => prev + makeItPrettyForPrinting(curr);
            message = 'The following software is of newer version than the one you provided: <ul>' + result.reduce(reducerFunction, ""); + '</ul>';
        }
        document.getElementById('output').innerHTML = message;
    }

    function makeItPrettyForPrinting(softwareObject) {
        return '<li><strong>' +
            softwareObject.name +
            '</strong>, Version: <strong>' +
            softwareObject.version +
            '</strong></li>';
    }
</script>